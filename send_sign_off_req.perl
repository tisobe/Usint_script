#!/soft/ascds/DS.release/ots/bin/perl

#################################################################################################	
#												#
#	send_sign_off_req.perl: sending out sign off request to a user				#
#				this script read updates_tables.list and find which one is	#
#				required to be signed off, and send out email to a user		#
#				who is not a usint person					#
#												#
#	author: T. Isobe (tisobe@cfa.harvard.edu)						#
#	Oct 1, 2003   --- first version								#
#	Last Update: Mar 27, 2013								#
#												#
#################################################################################################	

#
#---- if this is usint version, set the following param to 'yes', otherwise 'no'
#

$usint_on = 'yes';                      ##### USINT Version
#$usint_on = 'no';                      ##### USER Version
#$usint_on = 'test_yes';                        ##### Test Version USINT
#$usint_on = 'test_no';                 ##### Test Version USER


#
#---- set directory paths : updated to read from a file (02/25/2011)	this is user: mta version
#

#open(IN, '/data/udoc1/ocat/Info_save/dir_list');
#open(IN, '/proj/web-cxc-dmz/htdocs/mta/CUS/Usint/ocat/Info_save/dir_list');
open(IN, '/data/mta4/CUS/www/Usint/ocat/Info_save/dir_list');

while(<IN>){
        chomp $_;
        @atemp    = split(/:/, $_);
        $atemp[0] =~ s/\s+//g;
        if($atemp[0] =~ /obs_ss/){
                $obs_ss   = $atemp[1];
        }elsif($atemp[0]  =~ /pass_dir/){
                $pass_dir = $atemp[1];
        }elsif($atemp[0]  =~ /mtemp_dir/){
                $temp_dir = $atemp[1];
        }elsif($atemp[0]  =~ /too_dir/){
                $data_dir = $atemp[1];
        }elsif($atemp[0]  =~ /ocat_dir/){
                $real_dir = $atemp[1];
        }elsif($atemp[0]  =~ /test_dir/){
                $test_dir = $atemp[1];
        }elsif($atemp[0]  =~ /cus_dir/){
                $cus_dir  = $atemp[1];
        }
}
close(IN);

if($usint_on =~ /test/i){
        $ocat_dir = $tet_dir;
}else{
        $ocat_dir = $real_dir;
}


#
#---- find out who are the usint people
#

open(FH, "$pass_dir/usint_users");
@usint_users = ();
while(<FH>){
	chomp $_;
	@atemp = split(/\s+/, $_);
	push(@usint_users, $atemp[0]);
}
close(FH);

#
#--- read updates_table.list to find out which ones are ready for sign off
#

open(FH, "$ocat_dir/updates_table.list");

OUTER:
while(<FH>){
	chomp $_;
	@atemp = split(/\t+/, $_);

#
#--- if general, acis, and si are signed off, but the last one is not, we need to send email out
#

	if($atemp[1] ne 'NA' && $atemp[2] ne 'NA' && $atemp[3] ne 'NA' && $atemp[4] eq 'NA'){

		$obsrev = $atemp[0];
		$user   = $atemp[6];
		@ctemp  = split(/\./, $obsrev);
		$obsid  = $ctemp[0];
		
#
#--- checking whether the user is the usint person, if not notify
#
		$usint = 'no';
		foreach $comp (@usint_users){
			if($user eq $comp){
				$usint = 'yes';
				next OUTER;
			}
		}

#
#------ find out what was changed from updates directory
#

		read_update_page();
#
#---- composing email
#
		if($usint eq 'no'){
			open(OUT, "> $temp_dir/notice.tmp");
			print  OUT 'All requested edits have been made for the following obsid.revs:',"\n\n";
			print  OUT "$obsrev\n\n";
			print  OUT "The follwing is a summary of your change request:\n\n";
			print  OUT "$line\n";
			print  OUT "Please remember you still need to approve the observation at: \n";
			if($usint_on =~ /no/){
				print  OUT 'https://cxc.cfa.harvard.edu/cgi-bin/obs_ss/ocatdata2html.cgi?';
			}else{
				print  OUT 'https://cxc.cfa.harvard.edu/mta/CUS/Usint/ocatdata2html.cgi?';
			}
			print  OUT "$obsid\n\n";
			print  OUT "unless the last submission was the \"approved\" submission.\n";
			print  OUT "This message is generated by a cron job.  Please do not reply.\n";
			print  OUT 'For help, contact HelpDesk -  http://cxc.harvard.edu/helpdesk/',"\n";
			close(OUT);
		}
#
#---- find email address of the user
#
		open(IN, "$pass_dir/user_email_list");
		OUTER:
		while(<IN>){
			chomp $_;
			@btemp = split(/\s+/, $_);
			if($user eq $btemp[2]){
				$email_address = $btemp[3];
				last OUTER;
			}
		}
		close(IN);
#
#--- send out email
#

		system("cat $temp_dir/notice.tmp |mailx -s \"Subject: Changes confirmed for your Chandra Observation: $obsrev\n\" -c \"cus\@head-cfa.harvard.edu swolk\@head-cfa.harvard.edu\"  -b isobe\@head-cfa.harvard.edu brad\@head-cfa.harvard.edu  $email_address ");

		system("rm $temp_dir/notice.tmp");

#
#--- sign off the observation in updates_table.list
#
		update_info();

	}

}	
close(FH);

###################################################################################
### update_info: will perform updates to table                                 ####
###################################################################################

sub update_info {

#--------------------------------------------
#------- foreach parameter entered from table    
#--------------------------------------------
	$incl = 0;
	$date = `date '+%D'`;
	 chop $date;

    	$j=0;
	open (INFILE, "<$ocat_dir/updates_table.list");
    	@revcopy = <INFILE>;
    	close (INFILE);
	@newoutput=();
	$last_sign = 0;
	foreach $newline (@revcopy){
               	chop $newline;
               	@newvalues= split ("\t", $newline);
               	$newobsrev = $newvalues[0];
               	$newgeneral_status = $newvalues[1];
               	$newacis_status = $newvalues[2];
               	$newsi_mode_status = $newvalues[3];
               	$newdutysci_status = $newvalues[4];
               	$newseqnum = $newvalues[5];
               	$newuser = $newvalues[6];
#-------------------------------------------
#---- there is obs id match, change the line
#-------------------------------------------
#		if($newobsrev eq $obsline){
		if($newobsrev eq $obsrev){
    			$j++;
				$templine="$newobsrev\t$newgeneral_status\t$newacis_status\t$newsi_mode_status\tUSER $date\t$newseqnum\t$newuser\n";
				push (@newoutput,$templine);
#---------------------------------------------
#--- id did not match; so just write the line
#---------------------------------------------
		} else {
    			$newline="$newline\n";
    			push (@newoutput,$newline);
		}
	}
#----------------------------------------------------------------------
#---- start updating the updates_table.list, if there are any changes.
#----------------------------------------------------------------------
    	if ($j == 1){
#####
		chdir "$ocat_dir";
#####
		$status=`/usr/bin/sccs info $ocat_dir`;
		if ($status=~/Nothing being edited/ig){
	    		$checkout = `/usr/bin/sccs edit $ocat_dir/updates_table.list`;

	    		open (OUTFILE, "+>$ocat_dir/updates_table.list");
	    		foreach $outline (@newoutput){

				print OUTFILE "$outline";
	    		}
	    		close (OUTFILE);
	    		$checkin=`/usr/bin/sccs delget -y $ocat_dir/updates_table.list`;
	    		@newoutput=();

# else, if the file is being updated, print an error
		} else {
    			print "Please use the back button to return to the previous page, and resubmit.\n";
#-----------------------------------------------------------------------
#----- if there is an error, exit now so no mail or file writing happens
#-----------------------------------------------------------------------
    			exit();
    		}
	}
}

####################################################################################
### read_update_page: read a file data from updates directory                    ###
####################################################################################

sub read_update_page{
	open(PRE,"$ocat_dir/updates/$obsrev");

	$after    = 0;
	$gch      = 0;
	$ach      = 0;
	$awch     = 0;
	$gch_emp  = 0;
	$ach_emp  = 0;
	$awch_emp = 0;
	$gch_ln   = 0;
	$ach_ln   = 0;
	$awch_ln  = 0;
	$line = '';
	OUTER:
	while(<PRE>){
		chomp $_;
		$atest = $_;
		@atemp = split(//, $_);
		if($_ =~ /^-----------/){
			$after++;
		}
		if($after < 1){
			if($_ =~ /GENERAL CHANGES/){
				$line = "$line"."\n****GENERAL CHANGES:****\n\n";
				$gch++;
			}elsif($_ =~ /ACIS CHANGES/){
				if($gch_ln == 0 && $ach_emp == 0 && $ach_ln == 0){
					$line = "$line"."\tnone\n\n";
				}
				if($ach_emp == 0 && $ach_ln == 0){
					$line = "$line"."\n****ACIS CHANGES:****\n\n";
				}
				$ach++;
			}elsif($_ =~ /ACIS WINDOW CHANGES/){
				if($ach_ln == 0 && $awch_emp == 0 && $asch_ln == 0){
					$line = "$line"."\tnone\n\n";
				}
				if($awch_emp == 0 && $awch_ln == 0){
					$line = "$line"."\n****ACIS WINDOW CHANGES:****\n\n";
				}
				$awch++;
			}elsif($gch > 0 && $ach == 0){
				if($_ eq ''){
					$gch_emp++;
				}else{
					$line = "$line"."$_\n";
					$gch_ln++;
				}
			}elsif($ach > 0 && $awch == 0){
				if($_ eq ''){
					$ach_emp++;
				}else{
					$line = "$line"."$_\n";
					$ach_ln++;
				}
			}elsif($awch > 0){
				if($_ eq ''){
					$awch_emp++;
				}else{
					$line = "$line"."$_\n";
					$awch_ln++;
				}
			}
		}else{
			if($awch_ln == 0){
				$line = "$line"."\tnone\n\n";
			}
			last OUTER;
		}
	}
	close(PRE);
}
